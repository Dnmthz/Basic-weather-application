# Job Search and Auto Applier

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context

Server and Chrome extension for automating job search and application processes that:
- Auto-searches job postings within a 15-mile radius of Greer, South Carolina.
- Auto-fills job application forms with stored user data.
- Auto-submits applications after validating required fields.
- Tracks submitted applications for user review.

## Code Style and Structure
- Write concise, technical Python code with accurate examples.
- Use functional and modular programming patterns; avoid redundant code.
- Use descriptive variable names with auxiliary verbs (e.g., is_applying, has_error).
- Structure repository files as follows:

server/
  └── src/
      ├── integrations/  # API and scraping logic for job platforms
      ├── jobs/          # Job search and application logic
      ├── utils/         # Helper functions
      ├── types/         # Python type hints and schemas
      └── storage/       # Persistent storage utilities

extension/
  └── src/
      ├── background/    # Service worker scripts
      ├── content/       # Content scripts
      ├── popup/         # Extension popup UI
      ├── options/       # Extension options page
      ├── components/    # Shared components
      ├── utils/         # Helper functions
      ├── types/         # Python type hints and schemas
      ├── storage/       # Chrome storage utilities
      └── scripts/       # Automation scripts

shared/
└── src/
    ├── types/          # Shared Python type hints
    ├── utils/          # Shared helper functions

## Tech Stack
- Python
- Flask
- Selenium (for web scraping fallback)
- SQLite (for lightweight storage)
- React (for the extension UI)
- Tailwind CSS
- Manifest v3 Chrome Extension

## Naming Conventions
- Use lowercase with underscores for file and directory names (e.g., job_search, form_validator).
- Favor named exports for modules and functions.
- Use PascalCase for class names (e.g., JobApplication).
- Use snake_case for functions and variables (e.g., apply_to_job, search_results).

## Python Usage
- Use type hints for all functions and variables.
- Avoid global variables; prefer function arguments and local scope.
- Use comprehensions and functional constructs (e.g., map, filter) where applicable.
- Implement modular and reusable functions.
- Use async and await for I/O-bound operations.
- Handle errors using try/except blocks with meaningful logging.

## Chrome Extension Specifics
- Use Manifest v3 standard.
- Implement proper message passing between components:
  ```
message_payload = {
    "type": "string",
    "data": "unknown",
}

- Handle permissions properly in manifest.json.

- Use chrome.storage.local for persistent data.

- For the async injected scripts in content/:

- They must not close over variables from the outer scope.

- They must not use imported functions from the outer scope.

- They must have wrapped error handling so the error message is returned to the caller.

## State Management

- Use Flask-SQLAlchemy for persistent storage in the server.

- Maintain local state in chrome.storage.local for the extension.

- Implement proper cleanup for event listeners and observers.

## Syntax and Formatting
- Use def keyword for functions.
- Avoid unnecessary parentheses in conditionals.
- Use declarative React JSX for the extension UI.
- Implement proper Python data classes for structured data.

## UI and Styling
- Use Tailwind CSS for styling.
- Implement a responsive and user-friendly UI.
- Follow Material Design guidelines for Chrome extensions.
- Add components for:
- Job filters (e.g., location radius, keywords, salary range).
- Application tracking (e.g., progress bars, applied job history).

## Performance Optimization
- Cache job search results to reduce redundant requests.
- Optimize web scraping with headless browsers.
- Implement proper lazy loading for non-critical components.
- Use SQLite for lightweight and efficient data storage.

## Error Handling
- Implement proper error logging for debugging.
- Provide user-friendly error messages for common issues:
- Invalid or missing fields in job applications.
- Rate limits or scraping blocks.
- Job posting expiration.

## Testing
- Write unit tests for utilities and components.
- Implement E2E tests for critical flows.
- Test across different Chrome versions.
- Test memory usage and performance for the extension.

## Security
- Encrypt sensitive user data (e.g., resumes and credentials).
- Sanitize input data before submitting to job platforms.
- Follow Chrome extension security best practices.
- Implement proper CORS handling.

## Git Usage

- Commit Message Prefixes:

- feat: for new features

- fix: for bug fixes

- refactor: for code refactoring

- style: for formatting changes

- test: for adding missing tests

- chore: for maintenance tasks

Rules:
- Use lowercase for commit messages.
- Keep the summary line concise.
- Include descriptions for non-obvious changes.
- Reference issue numbers when applicable.

## Documentation
- Maintain a clear README with setup instructions.
- Document API integrations and data flows.
- Include comments for complex logic.
- Document Chrome extension permission requirements.

## Deployment Workflow
- Use proper version control.
- Implement a thorough code review process.
- Test in multiple environments.
- Follow semantic versioning for releases.
- Maintain a detailed changelog.

